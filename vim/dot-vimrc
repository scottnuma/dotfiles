set nocompatible
filetype off  
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
	Plugin 'VundleVim/Vundle.vim'

	" Use colorful rainbow parentheses
	Plugin 'luochen1990/rainbow'
		let g:rainbow_active = 1

	" Treat window and tmux navigation the same
	Plugin 'christoomey/vim-tmux-navigator'

        " Gotham color scheme
	Plugin 'whatyouhide/vim-gotham'

        " Vim-one color scheme https://github.com/rakr/vim-one
        Plugin 'rakr/vim-one'

        " fzf
        Plugin 'junegunn/fzf'
        Plugin 'junegunn/fzf.vim'

        " Define a new command that searches from the project root as defined
        " by git
        function! s:find_git_root()
                return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
        endfunction
        command! ProjectFiles execute 'Files' s:find_git_root()

        " set ctrl-p to FZF fuzzy searching from the git root
        nnoremap <silent> <C-p> :ProjectFiles<CR>

        let g:fzf_action = {
          \ 'ctrl-t': 'tab split',
          \ 'ctrl-h': 'split',
          \ 'ctrl-v': 'vsplit' }

        let g:fzf_layout = { 'up': '~40%' }
        
        " vim-go
        "
        Plugin 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
        set autowrite                           " Save on GoBuild etc
        let g:go_fmt_command = "goimports"      " Use goimports over gofmt
        let g:go_highlight_types = 1            " Use better syntax highlighting
        let g:go_highlight_fields = 1
        let g:go_highlight_functions = 1
        let g:go_highlight_function_calls = 1

        " disable vim-go :GoDef short cut (gd)
        " this is handled by LanguageClient [LC]
        let g:go_def_mapping_enabled = 0
        
        Plugin 'neoclide/coc.nvim', {'branch': 'release'}


	" NERDTree
	Plugin 'scrooloose/nerdtree'
		map <C-n> :NERDTreeToggle<CR>

		" Close window if only window left is NERDTree
		autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

        " Render buffers as tabs: https://github.com/zefei/vim-wintabs
        Plugin 'zefei/vim-wintabs'

call vundle#end()


filetype plugin indent on

:imap jk <Esc>
:imap jj <Esc>

" Use the insert key to toggle paste mode in insert mode
set pastetoggle=<Insert>

set relativenumber
set number
syntax enable
"
" Always display the status line
set laststatus=2
 
set statusline=%f\      "filename
set statusline+=%y      "filetype
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag

set statusline+=%=      "left/right separator

set statusline+=C%c\      "cursor column

" Set status line to light blue on gray
hi StatusLine ctermbg=black ctermfg=4

" Enable viusal mode for all modes
:set mouse=a

let mapleader = ";"

" Highlight all search matches
set hlsearch

" Set mapping for switching between buffers
map <leader>l :WintabsNext<CR>
map <leader>h :WintabsPrevious<CR>
map <leader>w :WintabsClose<CR>

" Set shortcut for vim spitting the screen
map <leader>" :sv<CR>
map <leader>% :vs<CR>

" Use ctrl-c and ctrl-v for interacting with the system clipboard
:inoremap <C-v> <ESC>"+pa
:vnoremap <C-c> "+y
:vnoremap <C-d> "+d

" Set the tab spacing for ruby files
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype css setlocal ts=2 sts=2 sw=2
autocmd Filetype scss setlocal ts=2 sts=2 sw=2
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
autocmd Filetype c setlocal ts=2 sts=2 sw=2
autocmd Filetype go setlocal ts=4 sts=4 sw=4
autocmd Filetype yaml setlocal ts=2 sts=2 sw=2

" Spaces not tabs
set expandtab

" When a single line wraps around, use j and k to navigate inside the lines
" nnoremap j gj
" nnoremap k gk

" make backspace work across lines
set backspace=2 

" Look in parent directories for the ctags tags file
set tags+=tags;~

" Set the working directory as the current directoy 
" set autochdir

if has("nvim")
        set termguicolors
endif

" Set color scheme
" colorscheme gotham
" colorscheme snow
"
"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

colorscheme one

" -----------------------------------------------------------------------------
" coc.nvim default settings
" taken from https://octetz.com/docs/2019/2019-04-24-vim-as-a-go-ide/
" -----------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Remap return 

" Use U to show documentation in preview window
nnoremap <silent> U :call <SID>show_documentation()<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>

" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
