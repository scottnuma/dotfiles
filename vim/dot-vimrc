set nocompatible
filetype off  
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
	Plugin 'VundleVim/Vundle.vim'

	" Use colorful rainbow parentheses
	Plugin 'luochen1990/rainbow'
		let g:rainbow_active = 1

	" Treat window and tmux navigation the same
	Plugin 'christoomey/vim-tmux-navigator'

        " Gotham color scheme
	" Plugin 'whatyouhide/vim-gotham'

        " Vim-one color scheme https://github.com/rakr/vim-one
        Plugin 'rakr/vim-one'

        " fzf
        Plugin 'junegunn/fzf'
        Plugin 'junegunn/fzf.vim'

        " Define a new command that searches from the project root as defined
        " by git
        function! s:find_git_root()
                return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
        endfunction
        command! ProjectFiles execute 'Files' s:find_git_root()

        " set ctrl-p to FZF fuzzy searching from the git root
        nnoremap <silent> <C-p> :ProjectFiles<CR>

        let g:fzf_action = {
          \ 'ctrl-t': 'tab split',
          \ 'ctrl-h': 'split',
          \ 'ctrl-v': 'vsplit' }

        let g:fzf_layout = { 'up': '~40%' }
        
        " vim-go
        "
        Plugin 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
        set autowrite                           " Save on GoBuild etc
        let g:go_fmt_command = "goimports"      " Use goimports over gofmt
        let g:go_highlight_types = 1            " Use better syntax highlighting
        let g:go_highlight_fields = 1
        let g:go_highlight_functions = 1
        let g:go_highlight_function_calls = 1
        let g:go_doc_keywordprg_enabled = 0


        " disable vim-go :GoDef short cut (gd)
        " this is handled by LanguageClient [LC]
        let g:go_def_mapping_enabled = 0
        
        "Plugin 'neoclide/coc.nvim', {'branch': 'release'}
        " source ~/.coc.vimrc


	" NERDTree
	Plugin 'scrooloose/nerdtree'
		map <C-n> :NERDTreeToggle<CR>

		" Close window if only window left is NERDTree
		autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

        " Render buffers as tabs: https://github.com/zefei/vim-wintabs
        Plugin 'zefei/vim-wintabs'
        let g:wintabs_display = "statusline"
        let g:wintabs_autoclose = 2
        let g:wintabs_autoclose_vim = 1
        let g:wintabs_autoclose_vimtab = 1

        " treesitter
        Plugin 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

        " neovim lsp config
        Plugin 'neovim/nvim-lspconfig'

call vundle#end()


filetype plugin indent on

:imap jk <Esc>
:imap jj <Esc>

" Use the insert key to toggle paste mode in insert mode
set pastetoggle=<Insert>

set relativenumber
set number
syntax enable
"
" Always display the status line
set laststatus=2
 
set statusline=%f\      "filename
set statusline+=%y      "filetype
set statusline+=%h      "help file flag
set statusline+=%m      "modified flag
set statusline+=%r      "read only flag

set statusline+=%=      "left/right separator

set statusline+=C%c\      "cursor column

" Set status line to light blue on gray
hi StatusLine ctermbg=black ctermfg=4

" Enable viusal mode for all modes
:set mouse=a

let mapleader = ";"

" Highlight all search matches
set hlsearch

" Set mapping for switching between buffers
map <leader>l :WintabsNext<CR>
map <leader>h :WintabsPrevious<CR>
map <leader>w :WintabsClose<CR>

" Set shortcut for vim spitting the screen
map <leader>" :sv<CR>
map <leader>% :vs<CR>

" Use ctrl-c and ctrl-v for interacting with the system clipboard
:inoremap <C-v> <ESC>"+pa
:vnoremap <C-c> "+y
:vnoremap <C-d> "+d

" Set the tab spacing for ruby files
autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype css setlocal ts=2 sts=2 sw=2
autocmd Filetype scss setlocal ts=2 sts=2 sw=2
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
autocmd Filetype c setlocal ts=2 sts=2 sw=2
autocmd Filetype go setlocal ts=4 sts=4 sw=4
autocmd Filetype yaml setlocal ts=2 sts=2 sw=2

" Spaces not tabs
set expandtab
        

" When a single line wraps around, use j and k to navigate inside the lines
" nnoremap j gj
" nnoremap k gk

" make backspace work across lines
set backspace=2 

" Look in parent directories for the ctags tags file
set tags+=tags;~

" Set the working directory as the current directoy 
" set autochdir

if has("nvim")
        set termguicolors
endif

" Set color scheme
" colorscheme gotham
" colorscheme snow
"
"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

colorscheme one

" -----------------------------------------------------------------------------
" coc.nvim default settings
" taken from https://octetz.com/docs/2019/2019-04-24-vim-as-a-go-ide/
" -----------------------------------------------------------------------------

" if hidden is not set, TextEdit might fail.
set hidden
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

" End coc

" Default to case insensitive search 
set ignorecase
" Use case sensitivity if we use a capital letter
set smartcase

" Treesitter config
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {"go", "python", "yaml", "json", "html", "ruby"}, -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  highlight = {
    enable = true,              -- false will disable the whole extension
  },
  indent = {
    enable = true
  }
}

EOF

set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set foldlevel=10


" Python LSP
lua << EOF
require'lspconfig'.pyright.setup{}
EOF

" LSP key bindings
lua << EOF
local nvim_lsp = require('lspconfig')
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
        -- Jumps to the declaration of the symbol under the cursor.

  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
        -- Jumps to the definition of the symbol under the cursor.

  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
        -- Displays hover information about the symbol under the cursor
        -- in a floating window. Calling the function twice will jump
        -- into the floating window.

  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
        -- Lists all the implementations for the symbol under the cursor
        -- in the quickfix window.

  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
        -- Displays signature information about the symbol under the
        -- cursor in a floating window.

-- maybe delete this
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
        -- Add the folder at path to the workspace folders. If {path} is
        -- not provided, the user will be prompted for a path using
        -- |input()|.

-- maybe delete this
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
        -- Remove the folder at path from the workspace folders. If
        -- {path} is not provided, the user will be prompted for a path
        -- using |input()|.

  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
        -- list workspace folders

  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
        -- Jumps to the definition of the type of the symbol under the
        -- cursor.

  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
        -- Renames all references to the symbol under the cursor.

  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
        -- Lists all the references to the symbol under the cursor in the
        -- quickfix window.

  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
        -- Open a floating window with the diagnostics from {line_nr}

  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
        -- Move to the previous diagnostic

  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
        -- Get the next diagnostic closest to the cursor_position

  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
        -- Sets the location list

  -- Set some keybinds conditional on server capabilities
  if client.resolved_capabilities.document_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
        -- Formats the current buffer.

  elseif client.resolved_capabilities.document_range_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
        -- See :help
  end

  -- Set autocommands conditional on server_capabilities
  if client.resolved_capabilities.document_highlight then
    vim.api.nvim_exec([[
      hi LspReferenceRead cterm=bold ctermbg=red guibg=LightYellow
      hi LspReferenceText cterm=bold ctermbg=red guibg=LightYellow
      hi LspReferenceWrite cterm=bold ctermbg=red guibg=LightYellow
      augroup lsp_document_highlight
        autocmd! * <buffer>
        autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
        autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
    ]], false)
  end
end

-- Use a loop to conveniently both setup defined servers 
-- and map buffer local keybindings when the language server attaches
local servers = { "pyright", "rust_analyzer", "tsserver" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup { on_attach = on_attach }
end
EOF
" End Treesitter config
